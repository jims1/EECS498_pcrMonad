(pcr
 (pcrsResetSelectCorrect 0
  (pcrsResetSelectCorrect-1 nil 3607602495
   ("" (grind) (("" (rewrite pcrsResetSelection) nil nil)) nil)
   ((pcrsResetSelection const-decl "PCRVALUES" pcr nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PCRINDEX type-eq-decl nil pcr nil) (PCR type-decl nil pcr nil)
    (PCRVALUES type-eq-decl nil pcr nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (PCR_SELECTION type-eq-decl nil pcr nil))
   shostak))
 (getPCRsCorrectness 0
  (getPCRsCorrectness-1 nil 3607602549
   ("" (induct-and-simplify pm) nil nil)
   ((list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PCR_SELECTION type-eq-decl nil pcr nil)
    (PCR type-decl nil pcr nil) (PCRVALUES type-eq-decl nil pcr nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (getPCRs const-decl "list[PCR]" pcr nil)
    (PCRINDEX type-eq-decl nil pcr nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list_induction formula-decl nil list_adt nil)
    (map adt-def-decl "list[T1]" list_adt_map nil))
   shostak))
 (antisym 0
  (antisym-1 nil 3607602574
   ("" (grind) (("" (decompose-equality) nil nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PCR type-decl nil pcr nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (extend? adt-recognizer-decl "[PCR -> boolean]" pcr nil)
    (pcr adt-accessor-decl "[(extend?) -> PCR]" pcr nil)
    (PCRVAL formal-nonempty-type-decl nil pcr nil)
    (extend adt-constructor-decl "[[PCR, PCRVAL] -> (extend?)]" pcr
     nil)
    (hash adt-accessor-decl "[(extend?) -> PCRVAL]" pcr nil)
    (/= const-decl "boolean" notequal nil))
   shostak))
 (differentHashesExtend 0
  (differentHashesExtend-1 nil 3607601911
   ("" (skosimp) (("" (decompose-equality) nil nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PCR type-decl nil pcr nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (extend? adt-recognizer-decl "[PCR -> boolean]" pcr nil)
    (pcr adt-accessor-decl "[(extend?) -> PCR]" pcr nil)
    (PCRVAL formal-nonempty-type-decl nil pcr nil)
    (extend adt-constructor-decl "[[PCR, PCRVAL] -> (extend?)]" pcr
     nil)
    (hash adt-accessor-decl "[(extend?) -> PCRVAL]" pcr nil))
   shostak))
 (differentPcrsExtend 0
  (differentPcrsExtend-1 nil 3607601993
   ("" (skosimp) (("" (decompose-equality -1) nil nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PCR type-decl nil pcr nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (extend? adt-recognizer-decl "[PCR -> boolean]" pcr nil)
    (pcr adt-accessor-decl "[(extend?) -> PCR]" pcr nil)
    (PCRVAL formal-nonempty-type-decl nil pcr nil)
    (extend adt-constructor-decl "[[PCR, PCRVAL] -> (extend?)]" pcr
     nil)
    (hash adt-accessor-decl "[(extend?) -> PCRVAL]" pcr nil))
   shostak))
 (Q_TCC1 0
  (Q_TCC1-1 nil 3606494536 ("" (subtype-tcc) nil nil) nil nil))
 (Q_TCC2 0
  (Q_TCC2-1 nil 3606494536 ("" (termination-tcc) nil nil) nil nil))
 (differentPcrsExtendMulti 0
  (differentPcrsExtendMulti-1 nil 3607602017
   ("" (induct-and-simplify hs)
    (("" (grind) (("" (decompose-equality) nil nil)) nil)) nil)
   ((AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pcr adt-accessor-decl "[(extend?) -> PCR]" pcr nil)
    (hash adt-accessor-decl "[(extend?) -> PCRVAL]" pcr nil)
    (extend adt-constructor-decl "[[PCR, PCRVAL] -> (extend?)]" pcr
     nil)
    (extend? adt-recognizer-decl "[PCR -> boolean]" pcr nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (HASHES type-eq-decl nil pcr nil) (PCR type-decl nil pcr nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil) (Q def-decl "PCR" pcr nil)
    (PCRVAL formal-nonempty-type-decl nil pcr nil)
    (list_induction formula-decl nil list_adt nil))
   shostak))
 (diffHashListQ 0
  (diffHashListQ-1 nil 3607602065
   ("" (induct-and-simplify hs0)
    (("" (decompose-equality)
      (("" (decompose-equality) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (extend adt-constructor-decl "[[PCR, PCRVAL] -> (extend?)]" pcr
     nil)
    (extend? adt-recognizer-decl "[PCR -> boolean]" pcr nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (HASHES type-eq-decl nil pcr nil) (PCR type-decl nil pcr nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Q def-decl "PCR" pcr nil)
    (PCRVAL formal-nonempty-type-decl nil pcr nil)
    (list_induction formula-decl nil list_adt nil))
   shostak))
 (diffPcrsQ 0
  (diffPcrsQ-1 nil 3607602121 ("" (induct-and-simplify hs) nil nil)
   ((list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (HASHES type-eq-decl nil pcr nil) (PCR type-decl nil pcr nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Q def-decl "PCR" pcr nil)
    (PCRVAL formal-nonempty-type-decl nil pcr nil)
    (list_induction formula-decl nil list_adt nil))
   shostak))
 (diffHashList_diffPcrs_Q 0
  (diffHashList_diffPcrs_Q-1 nil 3607602200
   ("" (induct-and-simplify hs0)
    (("1" (decompose-equality -1)
      (("1" (grind)
        (("1" (decompose-equality -3) nil nil)
         ("2" (decompose-equality -3) nil nil)
         ("3" (decompose-equality -3) nil nil))
        nil))
      nil)
     ("2" (decompose-equality 1)
      (("2" (decompose-equality -2) nil nil)) nil))
    nil)
   ((PCR_extend_extensionality formula-decl nil pcr nil)
    (hash adt-accessor-decl "[(extend?) -> PCRVAL]" pcr nil)
    (pcr adt-accessor-decl "[(extend?) -> PCR]" pcr nil)
    (resetOne? adt-recognizer-decl "[PCR -> boolean]" pcr nil)
    (reset? adt-recognizer-decl "[PCR -> boolean]" pcr nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (extend adt-constructor-decl "[[PCR, PCRVAL] -> (extend?)]" pcr
     nil)
    (extend? adt-recognizer-decl "[PCR -> boolean]" pcr nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (HASHES type-eq-decl nil pcr nil) (PCR type-decl nil pcr nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Q def-decl "PCR" pcr nil)
    (PCRVAL formal-nonempty-type-decl nil pcr nil)
    (list_induction formula-decl nil list_adt nil))
   shostak))
 (qDiffPcrs 0
  (qDiffPcrs-1 nil 3607602284
   ("" (induct-and-simplify hs)
    (("" (lemma "differentPcrsExtendMulti")
      (("" (inst?)
        (("" (inst -1 "extend(p1!1, cons1_var!1)")
          (("" (grind) (("" (decompose-equality) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((differentPcrsExtendMulti formula-decl nil pcr nil)
    (hash adt-accessor-decl "[(extend?) -> PCRVAL]" pcr nil)
    (pcr adt-accessor-decl "[(extend?) -> PCR]" pcr nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (extend adt-constructor-decl "[[PCR, PCRVAL] -> (extend?)]" pcr
     nil)
    (extend? adt-recognizer-decl "[PCR -> boolean]" pcr nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (HASHES type-eq-decl nil pcr nil) (PCR type-decl nil pcr nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Q def-decl "PCR" pcr nil)
    (PCRVAL formal-nonempty-type-decl nil pcr nil)
    (list_induction formula-decl nil list_adt nil))
   shostak))
 (extendDifferentHashes 0
  (extendDifferentHashes-1 nil 3607602363
   ("" (skosimp) (("" (decompose-equality) nil nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PCR type-decl nil pcr nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (extend? adt-recognizer-decl "[PCR -> boolean]" pcr nil)
    (pcr adt-accessor-decl "[(extend?) -> PCR]" pcr nil)
    (PCRVAL formal-nonempty-type-decl nil pcr nil)
    (extend adt-constructor-decl "[[PCR, PCRVAL] -> (extend?)]" pcr
     nil)
    (hash adt-accessor-decl "[(extend?) -> PCRVAL]" pcr nil))
   shostak))
 (extendSameInputs 0
  (extendSameInputs-1 nil 3607602383
   ("" (skosimp)
    (("" (prop)
      (("1" (decompose-equality -1) nil nil)
       ("2" (decompose-equality -1) nil nil)
       ("3" (replace -1 1)
        (("3" (replace -2 1) (("3" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((hash adt-accessor-decl "[(extend?) -> PCRVAL]" pcr nil)
    (extend adt-constructor-decl "[[PCR, PCRVAL] -> (extend?)]" pcr
     nil)
    (PCRVAL formal-nonempty-type-decl nil pcr nil)
    (pcr adt-accessor-decl "[(extend?) -> PCR]" pcr nil)
    (extend? adt-recognizer-decl "[PCR -> boolean]" pcr nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (PCR type-decl nil pcr nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak)))

