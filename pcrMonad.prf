(pcrMonad
 (returnPcrPart1 0
  (returnPcrPart1-1 nil 3606494899
   ("" (skosimp) (("" (replace -1 1) (("" (propax) nil nil)) nil)) nil)
   nil shostak))
 (sameReturn_sameRun 0
  (sameReturn_sameRun-1 nil 3606494935
   ("" (skosimp) (("" (replace -1 1) (("" (propax) nil nil)) nil)) nil)
   nil shostak))
 (returnPcrPart2 0
  (returnPcrPart2-1 nil 3606494958
   ("" (lemma "sameReturn_sameRun")
    (("" (expand "return") (("" (grind) nil nil)) nil)) nil)
   ((return const-decl "State" StateMonad nil)
    (PCR type-decl nil pcr nil)
    (PCRVAL formal-nonempty-type-decl nil pcrMonad nil)
    (sameReturn_sameRun formula-decl nil pcrMonad nil))
   shostak))
 (returnPcr 0
  (returnPcr-1 nil 3606495050
   ("" (skosimp)
    (("" (prop)
      (("1" (replace -1 1) (("1" (propax) nil nil)) nil)
       ("2" (lemma "sameReturn_sameRun") (("2" (grind) nil nil)) nil))
      nil))
    nil)
   ((return const-decl "State" StateMonad nil)
    (PCRVAL formal-nonempty-type-decl nil pcrMonad nil)
    (PCR type-decl nil pcr nil)
    (sameReturn_sameRun formula-decl nil pcrMonad nil))
   shostak))
 (sameStatePcr 0
  (sameStatePcr-1 nil 3607718015
   ("" (skosimp) (("" (grind) nil nil)) nil)
   ((return const-decl "State" StateMonad nil)
    (PCRVAL formal-nonempty-type-decl nil pcrMonad nil)
    (PCR type-decl nil pcr nil))
   shostak))
 (sameReturnRun 0
  (sameReturnRun-1 nil 3607718052
   ("" (skosimp) (("" (grind) nil nil)) nil)
   ((return const-decl "State" StateMonad nil)
    (PCRVAL formal-nonempty-type-decl nil pcrMonad nil)
    (PCR type-decl nil pcr nil))
   shostak))
 (sameStatePcr_sameReturnRun 0
  (sameStatePcr_sameReturnRun-1 nil 3607718064
   ("" (skosimp)
    (("" (prop) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
    nil)
   ((PCR type-decl nil pcr nil)
    (PCRVAL formal-nonempty-type-decl nil pcrMonad nil)
    (return const-decl "State" StateMonad nil))
   shostak))
 (bindTest1 0
  (bindTest1-1 nil 3606606519 ("" (grind) nil nil)
   ((PCR type-decl nil pcr nil)
    (PCRVAL formal-nonempty-type-decl nil pcrMonad nil)
    (return const-decl "State" StateMonad nil)
    (extendCurry const-decl "[PCR -> PCR]" pcrMonad nil)
    (modify const-decl "State" StateMonad nil)
    (extendWithStatePcr const-decl "[PCR -> State]" pcrMonad nil)
    (>>= const-decl "State" StateMonad nil))
   shostak))
 (bindTest2 0
  (bindTest2-1 nil 3606606539 ("" (grind) nil nil)
   ((PCR type-decl nil pcr nil)
    (PCRVAL formal-nonempty-type-decl nil pcrMonad nil)
    (return const-decl "State" StateMonad nil)
    (extendCurry const-decl "[PCR -> PCR]" pcrMonad nil)
    (modify const-decl "State" StateMonad nil)
    (extendWithStatePcr const-decl "[PCR -> State]" pcrMonad nil)
    (>>= const-decl "State" StateMonad nil))
   shostak))
 (bindPcr_differentStateGeneral 0
  (bindPcr_differentStateGeneral-1 nil 3606916327
   ("" (skosimp)
    (("" (grind) (("" (decompose-equality -1) nil nil)) nil)) nil)
   ((PCR type-decl nil pcr nil)
    (PCRVAL formal-nonempty-type-decl nil pcrMonad nil)
    (return const-decl "State" StateMonad nil)
    (extendCurry const-decl "[PCR -> PCR]" pcrMonad nil)
    (modify const-decl "State" StateMonad nil)
    (extendWithStatePcr const-decl "[PCR -> State]" pcrMonad nil)
    (>>= const-decl "State" StateMonad nil)
    (hash adt-accessor-decl "[(extend?) -> PCRVAL]" pcr nil)
    (extend adt-constructor-decl "[[PCR, PCRVAL] -> (extend?)]" pcr
     nil)
    (pcr adt-accessor-decl "[(extend?) -> PCR]" pcr nil)
    (extend? adt-recognizer-decl "[PCR -> boolean]" pcr nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (bindPcr_differentState 0
  (bindPcr_differentState-1 nil 3606916370
   ("" (skosimp) (("" (grind) (("" (decompose-equality) nil nil)) nil))
    nil)
   ((PCR type-decl nil pcr nil)
    (PCRVAL formal-nonempty-type-decl nil pcrMonad nil)
    (return const-decl "State" StateMonad nil)
    (extendCurry const-decl "[PCR -> PCR]" pcrMonad nil)
    (modify const-decl "State" StateMonad nil)
    (extendWithStatePcr const-decl "[PCR -> State]" pcrMonad nil)
    (>>= const-decl "State" StateMonad nil)
    (hash adt-accessor-decl "[(extend?) -> PCRVAL]" pcr nil)
    (resetOne adt-constructor-decl "(resetOne?)" pcr nil)
    (resetOne? adt-recognizer-decl "[PCR -> boolean]" pcr nil)
    (reset adt-constructor-decl "(reset?)" pcr nil)
    (reset? adt-recognizer-decl "[PCR -> boolean]" pcr nil)
    (extend adt-constructor-decl "[[PCR, PCRVAL] -> (extend?)]" pcr
     nil)
    (pcr adt-accessor-decl "[(extend?) -> PCR]" pcr nil)
    (extend? adt-recognizer-decl "[PCR -> boolean]" pcr nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (sameStatePcr_bind 0
  (sameStatePcr_bind-1 nil 3607718119
   ("" (skosimp) (("" (grind) nil nil)) nil)
   ((>>= const-decl "State" StateMonad nil)
    (extendWithStatePcr const-decl "[PCR -> State]" pcrMonad nil)
    (modify const-decl "State" StateMonad nil)
    (extendCurry const-decl "[PCR -> PCR]" pcrMonad nil)
    (return const-decl "State" StateMonad nil)
    (PCRVAL formal-nonempty-type-decl nil pcrMonad nil)
    (PCR type-decl nil pcr nil))
   shostak))
 (sameBindRun 0
  (sameBindRun-1 nil 3607718134
   ("" (skosimp) (("" (grind) (("" (decompose-equality) nil nil)) nil))
    nil)
   ((PCR type-decl nil pcr nil)
    (PCRVAL formal-nonempty-type-decl nil pcrMonad nil)
    (return const-decl "State" StateMonad nil)
    (extendCurry const-decl "[PCR -> PCR]" pcrMonad nil)
    (modify const-decl "State" StateMonad nil)
    (extendWithStatePcr const-decl "[PCR -> State]" pcrMonad nil)
    (>>= const-decl "State" StateMonad nil)
    (hash adt-accessor-decl "[(extend?) -> PCRVAL]" pcr nil)
    (extend adt-constructor-decl "[[PCR, PCRVAL] -> (extend?)]" pcr
     nil)
    (pcr adt-accessor-decl "[(extend?) -> PCR]" pcr nil)
    (extend? adt-recognizer-decl "[PCR -> boolean]" pcr nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (sameStatePcr_sameBindRun 0
  (sameStatePcr_sameBindRun-1 nil 3607718170
   ("" (skosimp)
    (("" (grind) (("" (decompose-equality -1) nil nil)) nil)) nil)
   ((PCR type-decl nil pcr nil)
    (PCRVAL formal-nonempty-type-decl nil pcrMonad nil)
    (return const-decl "State" StateMonad nil)
    (extendCurry const-decl "[PCR -> PCR]" pcrMonad nil)
    (modify const-decl "State" StateMonad nil)
    (extendWithStatePcr const-decl "[PCR -> State]" pcrMonad nil)
    (>>= const-decl "State" StateMonad nil)
    (hash adt-accessor-decl "[(extend?) -> PCRVAL]" pcr nil)
    (extend adt-constructor-decl "[[PCR, PCRVAL] -> (extend?)]" pcr
     nil)
    (pcr adt-accessor-decl "[(extend?) -> PCR]" pcr nil)
    (extend? adt-recognizer-decl "[PCR -> boolean]" pcr nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (sameHash_bind 0
  (sameHash_bind-1 nil 3607718207
   ("" (skosimp) (("" (grind) nil nil)) nil)
   ((>>= const-decl "State" StateMonad nil)
    (extendWithStatePcr const-decl "[PCR -> State]" pcrMonad nil)
    (modify const-decl "State" StateMonad nil)
    (extendCurry const-decl "[PCR -> PCR]" pcrMonad nil)
    (return const-decl "State" StateMonad nil)
    (PCRVAL formal-nonempty-type-decl nil pcrMonad nil)
    (PCR type-decl nil pcr nil))
   shostak))
 (sameBindRun_hash 0
  (sameBindRun_hash-1 nil 3607718223
   ("" (skosimp) (("" (grind) (("" (decompose-equality) nil nil)) nil))
    nil)
   ((PCR type-decl nil pcr nil)
    (PCRVAL formal-nonempty-type-decl nil pcrMonad nil)
    (return const-decl "State" StateMonad nil)
    (extendCurry const-decl "[PCR -> PCR]" pcrMonad nil)
    (modify const-decl "State" StateMonad nil)
    (extendWithStatePcr const-decl "[PCR -> State]" pcrMonad nil)
    (>>= const-decl "State" StateMonad nil)
    (hash adt-accessor-decl "[(extend?) -> PCRVAL]" pcr nil)
    (extend adt-constructor-decl "[[PCR, PCRVAL] -> (extend?)]" pcr
     nil)
    (pcr adt-accessor-decl "[(extend?) -> PCR]" pcr nil)
    (extend? adt-recognizer-decl "[PCR -> boolean]" pcr nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (sameHash_sameBindRun 0
  (sameHash_sameBindRun-1 nil 3607718247
   ("" (skosimp) (("" (grind) (("" (decompose-equality) nil nil)) nil))
    nil)
   ((PCR type-decl nil pcr nil)
    (PCRVAL formal-nonempty-type-decl nil pcrMonad nil)
    (return const-decl "State" StateMonad nil)
    (extendCurry const-decl "[PCR -> PCR]" pcrMonad nil)
    (modify const-decl "State" StateMonad nil)
    (extendWithStatePcr const-decl "[PCR -> State]" pcrMonad nil)
    (>>= const-decl "State" StateMonad nil)
    (hash adt-accessor-decl "[(extend?) -> PCRVAL]" pcr nil)
    (extend adt-constructor-decl "[[PCR, PCRVAL] -> (extend?)]" pcr
     nil)
    (pcr adt-accessor-decl "[(extend?) -> PCR]" pcr nil)
    (extend? adt-recognizer-decl "[PCR -> boolean]" pcr nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (sameBind 0
  (sameBind-1 nil 3607718718
   ("" (skosimp)
    (("" (grind)
      (("1" (decompose-equality) nil nil)
       ("2" (decompose-equality -1) nil nil))
      nil))
    nil)
   ((PCR type-decl nil pcr nil)
    (PCRVAL formal-nonempty-type-decl nil pcrMonad nil)
    (return const-decl "State" StateMonad nil)
    (extendCurry const-decl "[PCR -> PCR]" pcrMonad nil)
    (modify const-decl "State" StateMonad nil)
    (extendWithStatePcr const-decl "[PCR -> State]" pcrMonad nil)
    (>>= const-decl "State" StateMonad nil)
    (hash adt-accessor-decl "[(extend?) -> PCRVAL]" pcr nil)
    (extend adt-constructor-decl "[[PCR, PCRVAL] -> (extend?)]" pcr
     nil)
    (pcr adt-accessor-decl "[(extend?) -> PCR]" pcr nil)
    (extend? adt-recognizer-decl "[PCR -> boolean]" pcr nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (sameBindTotal 0
  (sameBindTotal-1 nil 3607718776
   ("" (skosimp)
    (("" (grind)
      (("1" (decompose-equality -2) nil nil)
       ("2" (decompose-equality -2) nil nil))
      nil))
    nil)
   ((PCR type-decl nil pcr nil)
    (PCRVAL formal-nonempty-type-decl nil pcrMonad nil)
    (return const-decl "State" StateMonad nil)
    (extendCurry const-decl "[PCR -> PCR]" pcrMonad nil)
    (modify const-decl "State" StateMonad nil)
    (extendWithStatePcr const-decl "[PCR -> State]" pcrMonad nil)
    (>>= const-decl "State" StateMonad nil)
    (hash adt-accessor-decl "[(extend?) -> PCRVAL]" pcr nil)
    (extend adt-constructor-decl "[[PCR, PCRVAL] -> (extend?)]" pcr
     nil)
    (pcr adt-accessor-decl "[(extend?) -> PCR]" pcr nil)
    (extend? adt-recognizer-decl "[PCR -> boolean]" pcr nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak)))

